"use strict";(self.webpackChunkreact_virtuoso=self.webpackChunkreact_virtuoso||[]).push([[6653],{7942:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(959);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},b=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(n),b=r,g=u["".concat(s,".").concat(b)]||u[b]||p[b]||o;return n?a.createElement(g,l(l({ref:t},d),{},{components:n})):a.createElement(g,l({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=b;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},9702:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>g,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var a=n(5882),r=n(950),o=(n(959),n(7942)),l=["components"],i={id:"tanstack-table-integration",title:"Table Virtuoso integrated with @tanstack/table",sidebar_label:"@tanstack/table",slug:"/tanstack-table-integration/"},s=void 0,c={unversionedId:"table/tanstack-table-integration",id:"table/tanstack-table-integration",title:"Table Virtuoso integrated with @tanstack/table",description:"The following takes the virtualized rows example of @tanstack/table and instead of using @tanstack/virtual it uses Table Virtoso.",source:"@site/docs/table/tanstack-table-integration.md",sourceDirName:"table",slug:"/tanstack-table-integration/",permalink:"/tanstack-table-integration/",draft:!1,editUrl:"https://github.com/petyosi/react-virtuoso/edit/master/docs/table/tanstack-table-integration.md",tags:[],version:"current",frontMatter:{id:"tanstack-table-integration",title:"Table Virtuoso integrated with @tanstack/table",sidebar_label:"@tanstack/table",slug:"/tanstack-table-integration/"},sidebar:"defaultSidebar",previous:{title:"Fixed Columns",permalink:"/table-fixed-columns/"},next:{title:"Responsive Columns",permalink:"/grid-responsive-columns/"}},d={},u=[{value:"Virtualized @tanstack/table with Table Virtuoso",id:"virtualized-tanstacktable-with-table-virtuoso",level:2}],p={toc:u},b="wrapper";function g(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)(b,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The following takes the ",(0,o.kt)("a",{parentName:"p",href:"https://tanstack.com/table/v8/docs/examples/react/virtualized-rows"},"virtualized rows example of @tanstack/table")," and instead of using @tanstack/virtual it uses Table Virtoso."),(0,o.kt)("h2",{id:"virtualized-tanstacktable-with-table-virtuoso"},"Virtualized @tanstack/table with Table Virtuoso"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live include-data import=@tanstack/react-table",live:!0,"include-data":!0,import:"@tanstack/react-table"},'import React from "react";\nimport {\n  flexRender,\n  getCoreRowModel,\n  getSortedRowModel,\n  useReactTable\n} from "@tanstack/react-table";\nimport { TableVirtuoso } from "react-virtuoso";\n\nimport { makeData } from "./data";\n\nexport default function App() {\n  const rerender = React.useReducer(() => ({}), {})[1];\n\n  const [sorting, setSorting] = React.useState([]);\n\n  const columns = React.useMemo(\n    () => [\n      {\n        accessorKey: "firstName",\n        cell: (info) => info.getValue()\n      },\n      {\n        accessorFn: (row) => row.lastName,\n        id: "lastName",\n        cell: (info) => info.getValue(),\n        header: () => <span>Last Name</span>\n      },\n      {\n        accessorKey: "age",\n        header: () => "Age",\n        size: 50\n      },\n      {\n        accessorKey: "visits",\n        header: () => <span>Visits</span>,\n        size: 50\n      },\n      {\n        accessorKey: "status",\n        header: "Status"\n      },\n      {\n        accessorKey: "progress",\n        header: "Profile Progress",\n        size: 80\n      }\n    ],\n    []\n  );\n\n  const [data, setData] = React.useState(() => makeData(500));\n  const refreshData = () => setData(() => makeData(500));\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      sorting\n    },\n    onSortingChange: setSorting,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel()\n  });\n\n  const { rows } = table.getRowModel();\n\n  return (\n    <div style={{ padding: "0.5rem" }}>\n      <div style={{ height: "0.5rem" }} />\n\n      <TableVirtuoso\n        style={{ height: "500px", border: "1px solid lightgray" }}\n        totalCount={rows.length}\n        components={{\n          Table: ({ style, ...props }) => {\n            return (\n              <table\n                {...props}\n                style={{\n                  ...style,\n                  width: "100%",\n                  tableLayout: "fixed",\n                  borderCollapse: "collapse",\n                  borderSpacing: 0\n                }}\n              />\n            );\n          },\n          TableRow: (props) => {\n            const index = props["data-index"];\n            const row = rows[index];\n\n            return (\n              <tr {...props}>\n                {row.getVisibleCells().map((cell) => (\n                  <td key={cell.id} style={{ padding: "6px" }}>\n                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                  </td>\n                ))}\n              </tr>\n            );\n          }\n        }}\n        fixedHeaderContent={() => {\n          return table.getHeaderGroups().map((headerGroup) => (\n            <tr\n              key={headerGroup.id}\n              style={{ background: "lightgray", margin: 0 }}\n            >\n              {headerGroup.headers.map((header) => {\n                return (\n                  <th\n                    key={header.id}\n                    colSpan={header.colSpan}\n                    style={{\n                      width: header.getSize(),\n                      borderBottom: "1px solid lightgray",\n                      padding: "2px 4px",\n                      textAlign: "left"\n                    }}\n                  >\n                    {header.isPlaceholder ? null : (\n                      // eslint-disable-next-line jsx-a11y/click-events-have-key-events\n                      <div\n                        {...{\n                          style: header.column.getCanSort()\n                            ? { cursor: "pointer", userSelect: "none" }\n                            : {},\n                          onClick: header.column.getToggleSortingHandler()\n                        }}\n                      >\n                        {flexRender(\n                          header.column.columnDef.header,\n                          header.getContext()\n                        )}\n                        {{\n                          asc: " \ud83d\udd3c",\n                          desc: " \ud83d\udd3d"\n                        }[header.column.getIsSorted()] ?? null}\n                      </div>\n                    )}\n                  </th>\n                );\n              })}\n            </tr>\n          ));\n        }}\n      />\n\n      <div>{table.getRowModel().rows.length} Rows</div>\n      <div>\n        <button onClick={() => rerender()}>Force Rerender</button>\n      </div>\n      <div>\n        <button onClick={() => refreshData()}>Refresh Data</button>\n      </div>\n    </div>\n  );\n}\n')))}g.isMDXComponent=!0}}]);