"use strict";(self.webpackChunkreact_virtuoso=self.webpackChunkreact_virtuoso||[]).push([[8235],{7942:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var r=n(959);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),u=l(n),m=i,g=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return n?r.createElement(g,s(s({ref:t},d),{},{components:n})):r.createElement(g,s({ref:t},d))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[u]="string"==typeof e?e:i,s[1]=a;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1318:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>g,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=n(5882),i=n(950),o=(n(959),n(7942)),s=["components"],a={id:"mocking-in-tests",title:"Mocking in tests",sidebar_label:"Mocking in tests",slug:"/mocking-in-tests/"},c=void 0,l={unversionedId:"scenarios/mocking-in-tests",id:"scenarios/mocking-in-tests",title:"Mocking in tests",description:"If you try to use Virtuoso in a testing environment, you're likely going to discover that it does not render any items. This is due to rendering being controlled by measuring the height of its DOM elements (the list container and the items themselves).",source:"@site/docs/scenarios/mocking-in-tests.md",sourceDirName:"scenarios",slug:"/mocking-in-tests/",permalink:"/mocking-in-tests/",draft:!1,editUrl:"https://github.com/petyosi/react-virtuoso/edit/master/docs/scenarios/mocking-in-tests.md",tags:[],version:"current",frontMatter:{id:"mocking-in-tests",title:"Mocking in tests",sidebar_label:"Mocking in tests",slug:"/mocking-in-tests/"},sidebar:"defaultSidebar",previous:{title:"MUI List",permalink:"/material-ui-endless-scrolling/"},next:{title:"Prepending Items",permalink:"/prepend-items/"}},d={},u=[],p={toc:u},m="wrapper";function g(e){var t=e.components,n=(0,i.Z)(e,s);return(0,o.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"If you try to use Virtuoso in a testing environment, you're likely going to discover that it does not render any items. This is due to rendering being controlled by measuring the height of its DOM elements (the list container and the items themselves).\nThis information is not available in the simulated JSDOM environment.\nTo work around this, Virtuoso exposes a ",(0,o.kt)("inlineCode",{parentName:"p"},"VirtuosoMockContext")," context API, which can be used to mock DOM measurements in tests, so list items or table rows would be rendered and could be tested with snapshots or other assertions."),(0,o.kt)("p",null,"It allows specifying ",(0,o.kt)("inlineCode",{parentName:"p"},"viewportHeight")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"itemHeight"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { render } from '@testing-library/react'\nimport * as React from 'react'\nimport { Virtuoso, VirtuosoMockContext } from 'react-virtuoso'\n\ndescribe('Virtuoso', () => {\n  type Item = { id: string, value: string }\n  const data: Item[] = [\n    { id: '1', value: 'foo' },\n    { id: '2', value: 'bar' },\n    { id: '3', value: 'baz' },\n  ]\n\n  it('correctly renders items', () => {\n    const { container } = render(<Virtuoso data={data} />, {\n      wrapper: ({ children }) => (\n        <VirtuosoMockContext.Provider value={{ viewportHeight: 300, itemHeight: 100 }}>{children}</VirtuosoMockContext.Provider>\n      ),\n    })\n\n    expect(container).toMatchSnapshot()\n  })\n})\n")),(0,o.kt)("p",null,"To mock VirtuosoGrid rendering, use ",(0,o.kt)("inlineCode",{parentName:"p"},"VirtuosoGridMockContext")," instead, which accepts additional ",(0,o.kt)("inlineCode",{parentName:"p"},"viewportWidth")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"itemWidth")," props."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { render } from '@testing-library/react'\nimport * as React from 'react'\nimport { VirtuosoGrid, VirtuosoGridMockContext } from 'react-virtuoso'\n\ndescribe('Virtuoso', () => {\n  type Item = { id: string, value: string }\n  const data: Item[] = [\n    { id: '1', value: 'foo' },\n    { id: '2', value: 'bar' },\n    { id: '3', value: 'baz' },\n  ]\n\n  it('correctly renders items', () => {\n    const { container } = render(<VirtuosoGrid data={data} />, {\n      wrapper: ({ children }) => (\n        <VirtuosoGridMockContext.Provider value={{ viewportHeight: 300, viewportWidth: 300, itemHeight: 100, itemWidth: 100 }}>\n          {children}\n        </VirtuosoGridMockContext.Provider>\n      ),\n    })\n\n    expect(container).toMatchSnapshot()\n  })\n})\n")))}g.isMDXComponent=!0}}]);