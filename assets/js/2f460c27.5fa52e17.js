"use strict";(self.webpackChunkreact_virtuoso=self.webpackChunkreact_virtuoso||[]).push([[8111],{7942:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var o=n(959);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=o.createContext({}),l=function(e){var t=o.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},s=function(e){var t=l(e.components);return o.createElement(d.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,d=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=l(n),m=r,g=p["".concat(d,".").concat(m)]||p[m]||c[m]||a;return n?o.createElement(g,u(u({ref:t},s),{},{components:n})):o.createElement(g,u({ref:t},s))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,u=new Array(a);u[0]=m;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[p]="string"==typeof e?e:r,u[1]=i;for(var l=2;l<a;l++)u[l]=n[l];return o.createElement.apply(null,u)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9047:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>d,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var o=n(5882),r=n(950),a=(n(959),n(7942)),u=["components"],i={id:"grouped-with-load-on-demand",title:"Grouped Load on Demand",sidebar_label:"Load on Demand",slug:"/grouped-with-load-on-demand/"},d=void 0,l={unversionedId:"grouped-mode/grouped-with-load-on-demand",id:"grouped-mode/grouped-with-load-on-demand",title:"Grouped Load on Demand",description:'The GroupedVirtuoso component can have a Footer, that has a "load more" button that appends more items to the existing ones.',source:"@site/docs/grouped-mode/grouped-with-load-on-demand.md",sourceDirName:"grouped-mode",slug:"/grouped-with-load-on-demand/",permalink:"/grouped-with-load-on-demand/",draft:!1,editUrl:"https://github.com/petyosi/react-virtuoso/edit/master/docs/grouped-mode/grouped-with-load-on-demand.md",tags:[],version:"current",frontMatter:{id:"grouped-with-load-on-demand",title:"Grouped Load on Demand",sidebar_label:"Load on Demand",slug:"/grouped-with-load-on-demand/"},sidebar:"defaultSidebar",previous:{title:"Grouped by First Letter",permalink:"/grouped-by-first-letter/"},next:{title:"Scroll to Group",permalink:"/scroll-to-group/"}},s={},p=[],c={toc:p},m="wrapper";function g(e){var t=e.components,n=(0,r.Z)(e,u);return(0,a.kt)(m,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"GroupedVirtuoso")," component can have a ",(0,a.kt)("inlineCode",{parentName:"p"},"Footer"),', that has a "load more" button that appends more items to the existing ones.'),(0,a.kt)("p",null,"To add additional items to the groups, you should re-calculate the ",(0,a.kt)("inlineCode",{parentName:"p"},"groupCounts")," property value with the group values of the newly loaded items.\nCheck the source code of this example for an example implementation."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"calculateGroupsSoFar")," Slices the total groups into the groups which contain the items so far.\nFor example, if you have ",(0,a.kt)("inlineCode",{parentName:"p"},"[10, 10, 10, 10]")," groups in total, slicing them to 23 will result in ",(0,a.kt)("inlineCode",{parentName:"p"},"[10, 10, 3]"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"setTimeout")," delay is just for illustrative purposes - in reality, the data is fetched from a remote source."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live include-data",live:!0,"include-data":!0},"import { GroupedVirtuoso } from 'react-virtuoso'\nimport { useCallback, useState, useRef, useEffect, useMemo } from 'react'\nimport { generateGroupedUsers, toggleBg } from './data'\n\nexport default function App() {\n  const { users, groups, groupCounts } = useMemo(\n    () => generateGroupedUsers(500),\n    []\n  )\n\n  const calculateGroupsSoFar = useCallback((totalGroups, count) => {\n    const groups = []\n    let i = 0\n    do {\n      const group = totalGroups[i]\n      groups.push(Math.min(group, count))\n      count -= group\n      i++\n    } while (count > 0 && i <= totalGroups.length)\n    return groups\n  }, [])\n\n  const [currentGroupCounts, setCurrentGroupCounts] = useState([])\n  const loadedItems = useRef(0)\n  const [loading, setLoading] = useState(false)\n\n  const loadMore = useCallback(() => {\n    setLoading(true)\n    return setTimeout(() => {\n      loadedItems.current += 50\n      setLoading(false)\n      setCurrentGroupCounts(\n        calculateGroupsSoFar(groupCounts, loadedItems.current)\n      )\n    }, 500)\n  }, [])\n\n  useEffect(() => {\n    const timeoutRef = loadMore()\n    return () => clearTimeout(timeoutRef)\n  }, [])\n\n  return (\n    <GroupedVirtuoso\n      style={{ height: 400 }}\n      groupCounts={currentGroupCounts}\n      groupContent={index => (\n        <div style={{ backgroundColor: 'var(--ifm-background-color)', paddingTop: '1rem' }}>Group {groups[index]}</div>\n      )}\n      itemContent={index => (\n        <div style={{ backgroundColor: toggleBg(index) }}>{users[index].name}</div>\n      )}\n      components={{\n        Footer: () => {\n          return (\n            <div\n              style={{\n                padding: '2rem',\n                display: 'flex',\n                justifyContent: 'center',\n              }}\n            >\n              <button disabled={loading} onClick={loadMore}>\n                {loading ? 'Loading...' : 'Press to load more'}\n              </button>\n            </div>\n          )\n        },\n      }}\n    />\n  )\n}\n")))}g.isMDXComponent=!0}}]);