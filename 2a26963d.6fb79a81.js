(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{143:function(e,n,r){"use strict";r.d(n,"a",(function(){return p})),r.d(n,"b",(function(){return f}));var t=r(0),o=r.n(t);function l(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){l(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},l=Object.keys(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)r=l[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=o.a.createContext({}),u=function(e){var n=o.a.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},p=function(e){var n=u(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},g=o.a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,l=e.originalType,a=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(r),g=t,f=p["".concat(a,".").concat(g)]||p[g]||d[g]||l;return r?o.a.createElement(f,i(i({ref:n},s),{},{components:r})):o.a.createElement(f,i({ref:n},s))}));function f(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var l=r.length,a=new Array(l);a[0]=g;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:t,a[1]=i;for(var s=2;s<l;s++)a[s]=r[s];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,r)}g.displayName="MDXCreateElement"},76:function(e,n,r){"use strict";r.r(n),r.d(n,"frontMatter",(function(){return a})),r.d(n,"metadata",(function(){return i})),r.d(n,"rightToc",(function(){return c})),r.d(n,"default",(function(){return u}));var t=r(2),o=r(6),l=(r(0),r(143)),a={id:"scroll-handling",title:"Scroll Handling",sidebar_label:"Scroll Handling",slug:"/scroll-handling/"},i={unversionedId:"scroll-handling",id:"scroll-handling",isDocsHomePage:!1,title:"Scroll Handling",description:"Loading and rendering complex content while scrolling affects the scrolling performance.",source:"@site/docs/scroll-handling.md",slug:"/scroll-handling/",permalink:"/scroll-handling/",editUrl:"https://github.com/petyosi/react-virtuoso/edit/master/site/docs/scroll-handling.md",version:"current",sidebar_label:"Scroll Handling",sidebar:"someSidebar",previous:{title:"Auto Resizing Virtual List",permalink:"/auto-resizing/"},next:{title:"Scroll to Index",permalink:"/scroll-to-index/"}},c=[],s={rightToc:c};function u(e){var n=e.components,r=Object(o.a)(e,["components"]);return Object(l.b)("wrapper",Object(t.a)({},s,r,{components:n,mdxType:"MDXLayout"}),Object(l.b)("p",null,"Loading and rendering complex content while scrolling affects the scrolling performance."),Object(l.b)("p",null,"To address that, the Virtuoso component exposes a ",Object(l.b)("inlineCode",{parentName:"p"},"scrollingStateChange")," event property which gets called when the user starts / stops scrolling.\nThe callback receives true when the user starts scrolling and false shortly after the last scroll event."),Object(l.b)("p",null,"Handling this event can be used to optimize performance by hiding/replacing certain elements in the items."),Object(l.b)("pre",null,Object(l.b)("code",Object(t.a)({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),"() => {\n  const [isScrolling, setIsScrolling] = useState(false);\n  const users = useMemo(() => generateUsers(100), [])\n  return (\n    <Virtuoso\n      data={users}\n      isScrolling={setIsScrolling}\n      itemContent={(index, user) => {\n        return (\n          <div\n            style={{\n              backgroundColor: user.bgColor,\n              padding: '1rem 0'\n            }}\n          >\n            \n            <div style={{ float: 'left', margin: '1rem' }}>\n              {isScrolling ? avatarPlaceholder() : avatar() }\n            </div>\n\n            <h4>{user.name}</h4>\n            <div style={{ marginTop: '1rem' }}>\n            {user.longText}\n            </div>\n          </div>\n        )\n      }}\n    />\n  )\n}\n")))}u.isMDXComponent=!0}}]);