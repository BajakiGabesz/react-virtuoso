(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{188:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return f}));var r=n(0),o=n.n(r);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),c=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},m=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,f=d["".concat(i,".").concat(m)]||d[m]||l[m]||s;return n?o.a.createElement(f,a(a({ref:t},p),{},{components:n})):o.a.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=m;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var p=2;p<s;p++)i[p]=n[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},67:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return a})),n.d(t,"rightToc",(function(){return u})),n.d(t,"default",(function(){return c}));var r=n(2),o=n(6),s=(n(0),n(188)),i={id:"prepend-items",title:"Prepending Items",sidebar_label:"Prepending Items",slug:"/prepend-items/"},a={unversionedId:"prepend-items",id:"prepend-items",isDocsHomePage:!1,title:"Prepending Items",description:"Appending items to the list is straightforward - the items at the bottom do not displace the currently rendered ones.",source:"@site/docs/prepend-items.md",slug:"/prepend-items/",permalink:"/prepend-items/",editUrl:"https://github.com/petyosi/react-virtuoso/edit/master/site/docs/prepend-items.md",version:"current",sidebar_label:"Prepending Items",sidebar:"someSidebar",previous:{title:"Endless Scrolling",permalink:"/endless-scrolling/"},next:{title:"Stick to Bottom",permalink:"/stick-to-bottom/"}},u=[],p={rightToc:u};function c(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Appending items to the list is straightforward - the items at the bottom do not displace the currently rendered ones.\nPrepending items is more complex because the current items should remain at their location, and their indexes should not be offset."),Object(s.b)("p",null,"This example shows how to increase the item count and instruct the component that you are prepending items by decreasing the ",Object(s.b)("inlineCode",{parentName:"p"},"firstItemIndex")," property\nvalue when the user scrolls to the top, creating ",Object(s.b)("strong",{parentName:"p"},"reverse endless scrolling"),"."),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx",metastring:"live include-data",live:!0,"include-data":!0}),"import { Virtuoso } from 'react-virtuoso'\nimport { generateUsers } from './data'\nimport { useState, useMemo, useCallback, useEffect, useRef } from 'react'\n\nexport default function App() {\n  const START_INDEX = 10000\n  const INITIAL_ITEM_COUNT = 100\n\n  const [firstItemIndex, setFirstItemIndex] = useState(START_INDEX)\n  const [users, setUsers] = useState(() => generateUsers(INITIAL_ITEM_COUNT, START_INDEX))\n\n  const prependItems = useCallback(() => {\n    const usersToPrepend = 20\n    const nextFirstItemIndex = firstItemIndex - usersToPrepend\n\n    setTimeout(() => {\n      setFirstItemIndex(() => nextFirstItemIndex)\n      setUsers(() => [...generateUsers(usersToPrepend, nextFirstItemIndex), ...users])\n    }, 500)\n\n    return false\n  }, [firstItemIndex, users, setUsers])\n\n  return (\n    <Virtuoso\n      style={{ height: 400 }}\n      firstItemIndex={firstItemIndex}\n      initialTopMostItemIndex={INITIAL_ITEM_COUNT - 1}\n      data={users}\n      startReached={prependItems}\n      itemContent={(index, user) => {\n        return (\n          <div style={{ backgroundColor: user.bgColor, padding: '1rem 0.5rem' }}>\n            <h4>\n              {user.index}. {user.name}\n            </h4>\n            <div style={{ marginTop: '1rem' }}>{user.description}</div>\n          </div>\n        )\n      }}\n    />\n  )\n}\n")),Object(s.b)("p",null,"Prepending items in grouped mode works in a similar fashion. You need to ensure that the ",Object(s.b)("inlineCode",{parentName:"p"},"firstItemIndex")," is decreased with the amount of items ",Object(s.b)("strong",{parentName:"p"},"exclding the groups themselves")," added to the ",Object(s.b)("inlineCode",{parentName:"p"},"groupCounts")," property.\nFollow the example below for further details"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-jsx",metastring:"live include-data",live:!0,"include-data":!0}),"import React from 'react'\nimport { GroupedVirtuoso } from 'react-virtuoso'\n\nfunction generateRandomString(length) {\n  let result = ''\n  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  const charactersLength = characters.length\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength))\n  }\n  return result\n}\n\nconst ITEMS_PER_GROUP = 10\nconst INITIAL_GROUP_COUNT = 21\nconst INITIAL_TOPMOST_ITEM_INDEX = ITEMS_PER_GROUP * INITIAL_GROUP_COUNT - 1\nconst FIRST_ITEM_INDEX = 20000\nconst ITEMS_PER_PREPEND = 100\n\nexport default function App() {\n  const [firstItemIndex, setFirstItemIndex] = React.useState(FIRST_ITEM_INDEX)\n\n  const [groupCounts, setGroupCounts] = React.useState(() => {\n    return Array.from({ length: INITIAL_GROUP_COUNT }, () => ITEMS_PER_GROUP)\n  })\n\n  // As items and groups get prepended, the groups change. We need to maintain an additional data structure to keep track of the group titles.\n  const [groupTitles, setGroupTitles] = React.useState(() => {\n    return Array.from({ length: INITIAL_GROUP_COUNT }, () => generateRandomString(5))\n  })\n\n  const prepend = React.useCallback(\n    (amount) => () => {\n      setFirstItemIndex((val) => val - amount)\n      setGroupCounts((prevGroups) => {\n        // this is just an example calculation so that the example validates the option to extend the first group\n        // in reality, you may don't need to do that.\n        const itemsToPrependToFirstGroup = amount % ITEMS_PER_GROUP\n\n        // we will extend the first group with the leftover unshift value,\n        // exact groups would also work, of course.\n        const firstGroupNewCount = [...prevGroups].shift() + itemsToPrependToFirstGroup\n\n        const newGroupCount = Math.floor(amount / ITEMS_PER_GROUP)\n        const newGroups = Array.from({ length: newGroupCount }, () => ITEMS_PER_GROUP)\n\n        const result = [...newGroups, firstGroupNewCount, ...prevGroups]\n\n        // prepend the group titles with new random strings based on how many new groups we added\n        setGroupTitles((prevTitles) => {\n          const newTitles = Array.from({ length: newGroupCount }, () => generateRandomString(5))\n          return [...newTitles, ...prevTitles]\n        })\n\n        return result\n      })\n    },\n    []\n  )\n\n  return (\n    <div>\n      <GroupedVirtuoso\n        firstItemIndex={firstItemIndex}\n        startReached={prepend(ITEMS_PER_PREPEND)}\n        initialTopMostItemIndex={INITIAL_TOPMOST_ITEM_INDEX}\n        context={{ groupTitles }}\n        groupCounts={groupCounts}\n        itemContent={(index) => <div style={{ height: '20px' }}>Item {index}</div>}\n        groupContent={(index, { groupTitles }) => <div style={{ height: '30px', backgroundColor: 'blue' }}>Group {groupTitles[index]}</div>}\n        style={{ height: '300px' }}\n      />\n    </div>\n  )\n}\n")))}c.isMDXComponent=!0}}]);