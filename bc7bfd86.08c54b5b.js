(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{159:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return c})),r.d(t,"metadata",(function(){return p})),r.d(t,"rightToc",(function(){return o})),r.d(t,"default",(function(){return l}));var a=r(2),n=r(6),i=(r(0),r(187)),c={id:"_urx_pipe_.comparator",title:"Interface: Comparator<T>",sidebar_label:"Comparator"},p={unversionedId:"api/interfaces/_urx_pipe_.comparator",id:"api/interfaces/_urx_pipe_.comparator",isDocsHomePage:!1,title:"Interface: Comparator<T>",description:'"urx/pipe".Comparator',source:"@site/docs/api/interfaces/_urx_pipe_.comparator.md",slug:"/api/interfaces/_urx_pipe_.comparator",permalink:"/api/interfaces/_urx_pipe_.comparator",editUrl:"https://github.com/petyosi/react-virtuoso/edit/master/site/docs/api/interfaces/_urx_pipe_.comparator.md",version:"current",sidebar_label:"Comparator",sidebar:"someSidebar",previous:{title:"Interface: Unsubscribe",permalink:"/api/interfaces/_urx_actions_.unsubscribe"},next:{title:"Interface: Operator<Input, Output>",permalink:"/api/interfaces/_urx_pipe_.operator"}},o=[{value:"Type parameters",id:"type-parameters",children:[]},{value:"Hierarchy",id:"hierarchy",children:[]},{value:"Callable",id:"callable",children:[]}],b={rightToc:o};function l(e){var t=e.components,r=Object(n.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/api/modules/_urx_pipe_"}),'"urx/pipe"'),".Comparator"),Object(i.b)("p",null,"A function which determines if two values are equal.\nImplement custom comparators when ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/api/modules/_urx_pipe_#distinctuntilchanged"}),"distinctUntilChanged")," needs to work on non-primitive objects."),Object(i.b)("h2",{id:"type-parameters"},"Type parameters"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"T"))))),Object(i.b)("h2",{id:"hierarchy"},"Hierarchy"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"Comparator"))),Object(i.b)("h2",{id:"callable"},"Callable"),Object(i.b)("p",null,"\u25b8 (",Object(i.b)("inlineCode",{parentName:"p"},"previous"),": T, ",Object(i.b)("inlineCode",{parentName:"p"},"next"),": T): boolean"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Defined in ",Object(i.b)("a",Object(a.a)({parentName:"em"},{href:"https://github.com/petyosi/react-virtuoso/blob/f61e769/src/urx/pipe.ts#L104"}),"src/urx/pipe.ts:104"))),Object(i.b)("p",null,"A function which determines if two values are equal.\nImplement custom comparators when ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"/api/modules/_urx_pipe_#distinctuntilchanged"}),"distinctUntilChanged")," needs to work on non-primitive objects."),Object(i.b)("h4",{id:"parameters"},"Parameters:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Name"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Type"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"previous")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"T")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("inlineCode",{parentName:"td"},"next")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"T")))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns:")," boolean"),Object(i.b)("p",null,"true if values should be considered equal."))}l.isMDXComponent=!0},187:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return d}));var a=r(0),n=r.n(a);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var b=n.a.createContext({}),l=function(e){var t=n.a.useContext(b),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},u=function(e){var t=l(e.components);return n.a.createElement(b.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},s=n.a.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,b=o(e,["components","mdxType","originalType","parentName"]),u=l(r),s=a,d=u["".concat(c,".").concat(s)]||u[s]||m[s]||i;return r?n.a.createElement(d,p(p({ref:t},b),{},{components:r})):n.a.createElement(d,p({ref:t},b))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,c=new Array(i);c[0]=s;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:a,c[1]=p;for(var b=2;b<i;b++)c[b]=r[b];return n.a.createElement.apply(null,c)}return n.a.createElement.apply(null,r)}s.displayName="MDXCreateElement"}}]);